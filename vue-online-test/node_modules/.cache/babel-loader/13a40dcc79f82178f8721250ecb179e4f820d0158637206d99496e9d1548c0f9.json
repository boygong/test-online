{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      pageSize: 10,\n      PagerTotal: 16,\n      ruleForm: {\n        examName: '',\n        className: 0,\n        startTime: '',\n        endTime: '',\n        questions: []\n      },\n      selectedQuestions: [],\n      // 已选的题目\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入考试名称',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 10,\n          message: '长度在 3 到 10 个字符',\n          trigger: 'blur'\n        }],\n        region: [{\n          required: true,\n          message: '请选择考试班级',\n          trigger: 'change'\n        }],\n        date1: [{\n          type: 'date',\n          required: true,\n          message: '请选择日期',\n          trigger: 'change'\n        }],\n        date2: [{\n          type: 'date',\n          required: true,\n          message: '请选择时间',\n          trigger: 'change'\n        }]\n      },\n      tableData: []\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          alert('submit!');\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    handleSelectionChange(val) {\n      this.multipleSelection = val;\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    loadData(page) {\n      const currentPage = page;\n      const pageSize = this.pageSize;\n      axios.get(`http://localhost:4399/question/getQuestion?currentPage=${currentPage}&pageSize=${pageSize}`).then(res => {\n        // Save the currently selected questions\n        const selectedIds = this.selectedQuestions.map(row => row.id);\n        this.tableData = res.data.data.source;\n\n        // Reset the selected state for the newly loaded data\n        this.tableData.forEach(row => {\n          if (selectedIds.includes(row.id)) {\n            this.$refs.multipleTable.toggleRowSelection(row, true);\n          }\n        });\n      }).catch(error => {\n        console.error('Error loading data:', error);\n      });\n    },\n    handleRowClick(row) {\n      // 如果选中的题目已经达到10个，不再允许选择其他题目\n      if (this.selectedQuestions.length < 10 || this.isSelected(row)) {\n        if (!this.isSelected(row)) {\n          this.selectedQuestions.push({\n            ...row\n          });\n        } else {\n          // 如果点击的题目已经被选中，取消选择\n          const index = this.selectedQuestions.findIndex(selectedRow => selectedRow.id === row.id);\n          if (index !== -1) {\n            this.selectedQuestions.splice(index, 1);\n          }\n        }\n        this.$refs.multipleTable.toggleRowSelection(row);\n      }\n      console.log(\"选择改变:\" + this.selectedQuestions);\n    },\n    handleSelectionChange(selection) {\n      // 将已选中的题目数量控制在 10 以内\n      if (selection.length > 10) {\n        const extraSelection = selection.slice(10);\n        extraSelection.forEach(row => {\n          this.$refs.multipleTable.toggleRowSelection(row);\n        });\n      }\n    },\n    isSelected(row) {\n      return this.selectedQuestions.some(selectedRow => selectedRow.id === row.id);\n    },\n    handlePageChange(page) {\n      // 在页码切换时保存当前已选中的题目\n      const selectedIds = this.selectedQuestions.map(row => row.id);\n\n      // 加载新数据\n      this.loadData(page);\n\n      // 设置新加载数据的选中状态\n      this.$nextTick(() => {\n        this.tableData.forEach(row => {\n          if (selectedIds.includes(row.id)) {\n            this.$refs.multipleTable.toggleRowSelection(row, true);\n          }\n        });\n      });\n      console.log(\"页面改变:\" + this.selectedQuestions);\n    }\n  },\n  mounted() {\n    this.loadData(1);\n  }\n};","map":{"version":3,"names":["axios","data","pageSize","PagerTotal","ruleForm","examName","className","startTime","endTime","questions","selectedQuestions","rules","name","required","message","trigger","min","max","region","date1","type","date2","tableData","methods","submitForm","formName","$refs","validate","valid","alert","console","log","handleSelectionChange","val","multipleSelection","resetForm","resetFields","loadData","page","currentPage","get","then","res","selectedIds","map","row","id","source","forEach","includes","multipleTable","toggleRowSelection","catch","error","handleRowClick","length","isSelected","push","index","findIndex","selectedRow","splice","selection","extraSelection","slice","some","handlePageChange","$nextTick","mounted"],"sources":["src/views/element/insertExamPage.vue"],"sourcesContent":["<template>\r\n    <el-container style=\"height: 100%; border: 1px solid #eee;width: 100%;\">\r\n        <el-header style=\"font-size:40px; background-color: rgb(238, 241, 246);text-align: center;\">\r\n            创建考试\r\n        </el-header>\r\n        <el-main>\r\n            <el-form :model=\"ruleForm\" :rules=\"rules\" ref=\"ruleForm\" label-width=\"100px\" class=\"demo-ruleForm\">\r\n                <el-form-item label=\"考试名称\" prop=\"name\">\r\n                    <el-input v-model=\"ruleForm.examName\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"考试班级\" prop=\"region\">\r\n                    <el-select v-model=\"ruleForm.className\" placeholder=\"请选择考试班级\">\r\n                        <el-option label=\"软件1班\" value=0></el-option>\r\n                        <el-option label=\"软件2班\" value=1></el-option>\r\n                        <el-option label=\"软件3班\" value=2></el-option>\r\n                        <el-option label=\"软件4班\" value=3></el-option>\r\n                        <el-option label=\"软件5班\" value=4></el-option>\r\n                        <el-option label=\"软件6班\" value=5></el-option>\r\n                    </el-select>\r\n                </el-form-item>\r\n                <el-form-item label=\"考试时间\" required>\r\n                    <el-col :span=\"11\">\r\n                        <el-form-item prop=\"date1\">\r\n                            <el-date-picker v-model=\"ruleForm.startTime\" type=\"datetime\"\r\n                                placeholder=\"开始时间\"></el-date-picker>\r\n\r\n                            <el-date-picker v-model=\"ruleForm.endTime\" type=\"datetime\" placeholder=\"结束时间\"></el-date-picker>\r\n                        </el-form-item>\r\n                    </el-col>\r\n                </el-form-item>\r\n\r\n\r\n                <el-form-item label=\"考试题目\" required>\r\n                    <!-- 选择题目表格 -->\r\n                    <el-table ref=\"multipleTable\" :data=\"tableData\" tooltip-effect=\"dark\" style=\"width: 100%\"\r\n                        @selection-change=\"handleSelectionChange\" @row-click=\"handleRowClick\">\r\n                        <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n                        <el-table-column prop=\"id\" label=\"序号\" width=\"50\"></el-table-column>\r\n                        <el-table-column prop=\"content\" label=\"题干\" width=\"250\"></el-table-column>\r\n                        <el-table-column label=\"题目类型\">\r\n                            <template slot-scope=\"scope\">\r\n                                <el-select v-model=\"scope.row.type\" placeholder=\"请选择\">\r\n                                    <el-option label=\"单选题\" value=\"0\"></el-option>\r\n                                    <el-option label=\"判断题\" value=\"1\"></el-option>\r\n                                </el-select>\r\n                            </template>\r\n                        </el-table-column>\r\n                        <el-table-column prop=\"opa\" label=\"A选项\"></el-table-column>\r\n                        <el-table-column prop=\"opb\" label=\"B选项\"></el-table-column>\r\n                        <el-table-column prop=\"opc\" label=\"C选项\"></el-table-column>\r\n                        <el-table-column prop=\"opd\" label=\"D选项\"></el-table-column>\r\n                        <el-table-column prop=\"currentAnswer\" label=\"正确选项\" width=\"50\"></el-table-column>\r\n                    </el-table>\r\n                </el-form-item>\r\n\r\n                <el-pagination :page-size=\"pageSize\" layout=\"prev, pager, next\" :total=\"PagerTotal\"\r\n                    @current-change=\"handlePageChange\"></el-pagination>\r\n\r\n                <div style=\"margin-top: 20px\">\r\n                    <el-button @click=\"toggleSelection()\">取消选择</el-button>\r\n                </div>\r\n                <el-form-item>\r\n                    <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">立即创建</el-button>\r\n                    <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n                </el-form-item>\r\n            </el-form>\r\n        </el-main>\r\n    </el-container>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nexport default {\r\n    data() {\r\n        return {\r\n            pageSize: 10,\r\n            PagerTotal: 16,\r\n            ruleForm: {\r\n                examName: '',\r\n                className: 0,\r\n                startTime: '',\r\n                endTime: '',\r\n                questions: [],\r\n            },\r\n            selectedQuestions: [], // 已选的题目\r\n            rules: {\r\n                name: [\r\n                    { required: true, message: '请输入考试名称', trigger: 'blur' },\r\n                    { min: 3, max: 10, message: '长度在 3 到 10 个字符', trigger: 'blur' }\r\n                ],\r\n                region: [\r\n                    { required: true, message: '请选择考试班级', trigger: 'change' }\r\n                ],\r\n                date1: [\r\n                    { type: 'date', required: true, message: '请选择日期', trigger: 'change' }\r\n                ],\r\n                date2: [\r\n                    { type: 'date', required: true, message: '请选择时间', trigger: 'change' }\r\n                ],\r\n            },\r\n            tableData: [],\r\n        }\r\n    },\r\n    methods: {\r\n        submitForm(formName) {\r\n            this.$refs[formName].validate((valid) => {\r\n                if (valid) {\r\n                    alert('submit!');\r\n                } else {\r\n                    console.log('error submit!!');\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        handleSelectionChange(val) {\r\n            this.multipleSelection = val;\r\n        },\r\n        resetForm(formName) {\r\n            this.$refs[formName].resetFields();\r\n        },\r\n        loadData(page) {\r\n            const currentPage = page;\r\n            const pageSize = this.pageSize;\r\n\r\n            axios.get(`http://localhost:4399/question/getQuestion?currentPage=${currentPage}&pageSize=${pageSize}`)\r\n                .then((res) => {\r\n                    // Save the currently selected questions\r\n                    const selectedIds = this.selectedQuestions.map(row => row.id);\r\n\r\n                    this.tableData = res.data.data.source;\r\n\r\n                    // Reset the selected state for the newly loaded data\r\n                    this.tableData.forEach(row => {\r\n                        if (selectedIds.includes(row.id)) {\r\n                            this.$refs.multipleTable.toggleRowSelection(row, true);\r\n                        }\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error loading data:', error);\r\n                });\r\n        },\r\n\r\n        handleRowClick(row) {\r\n            // 如果选中的题目已经达到10个，不再允许选择其他题目\r\n            if (this.selectedQuestions.length < 10 || this.isSelected(row)) {\r\n                if (!this.isSelected(row)) {\r\n                    this.selectedQuestions.push({ ...row });\r\n                } else {\r\n                    // 如果点击的题目已经被选中，取消选择\r\n                    const index = this.selectedQuestions.findIndex(selectedRow => selectedRow.id === row.id);\r\n                    if (index !== -1) {\r\n                        this.selectedQuestions.splice(index, 1);\r\n                    }\r\n                }\r\n\r\n                this.$refs.multipleTable.toggleRowSelection(row);\r\n            }\r\n            console.log(\"选择改变:\" + this.selectedQuestions)\r\n        },\r\n\r\n        handleSelectionChange(selection) {\r\n            // 将已选中的题目数量控制在 10 以内\r\n            if (selection.length > 10) {\r\n                const extraSelection = selection.slice(10);\r\n                extraSelection.forEach(row => {\r\n                    this.$refs.multipleTable.toggleRowSelection(row);\r\n                });\r\n            }\r\n        },\r\n\r\n        isSelected(row) {\r\n            return this.selectedQuestions.some(selectedRow => selectedRow.id === row.id);\r\n        },\r\n\r\n        handlePageChange(page) {\r\n            // 在页码切换时保存当前已选中的题目\r\n            const selectedIds = this.selectedQuestions.map(row => row.id);\r\n\r\n            // 加载新数据\r\n            this.loadData(page);\r\n\r\n            // 设置新加载数据的选中状态\r\n            this.$nextTick(() => {\r\n                this.tableData.forEach(row => {\r\n                    if (selectedIds.includes(row.id)) {\r\n                        this.$refs.multipleTable.toggleRowSelection(row, true);\r\n                    }\r\n                });\r\n            });\r\n            console.log(\"页面改变:\" + this.selectedQuestions);\r\n        },\r\n    },\r\n    mounted() {\r\n        this.loadData(1);\r\n    }\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}