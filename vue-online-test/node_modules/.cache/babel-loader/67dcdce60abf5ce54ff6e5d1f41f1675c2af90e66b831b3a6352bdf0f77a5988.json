{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'TestList',\n  data() {\n    return {\n      tableData: [{}]\n    };\n  },\n  methods: {\n    getButtonType(state) {\n      switch (state) {\n        case '已过期':\n          return 'danger';\n        case '即将过期':\n          return 'warning';\n        case '进行中':\n          return 'success';\n        case '待发布':\n          return '';\n        default:\n          return 'primary';\n      }\n    },\n    turnto(index, rows) {\n      const name = rows[index].name;\n      const user = JSON.parse(localStorage.getItem('user'));\n      this.$router.push({\n        name: 'ReadTest',\n        params: {\n          param1: name,\n          param2: parseInt(user.studentId)\n        }\n      });\n    },\n    deleteRow(index, rows) {\n      this.$confirm('确定提交吗？, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        rows.splice(index, 1);\n        this.$message({\n          type: 'success',\n          message: '提交成功!'\n        });\n      });\n    },\n    formatDateTime(row) {\n      const isoDate = row.startTime;\n      const date = new Date(isoDate);\n      return date.toLocaleString();\n    },\n    formatDateTime1(row) {\n      const isoDate = row.endTime;\n      const date = new Date(isoDate);\n      return date.toLocaleString();\n    }\n  },\n  mounted() {\n    const user = JSON.parse(localStorage.getItem('user'));\n    axios.get('http://localhost:4399/find', {\n      params: {\n        student_id: parseInt(user.studentId)\n      }\n    }).then(response => {\n      this.tableData = response.data;\n      console.log(response.data);\n      const currentTime = new Date();\n      this.tableData.forEach(row => {\n        const endTime = new Date(row.endTime);\n        const startTime = new Date(row.startTime);\n        const timeDiff = endTime - currentTime;\n        const timeDiff1 = startTime - currentTime;\n        if (row.state != '已完成') {\n          if (timeDiff < 0) {\n            row.state = '已过期';\n          } else if (timeDiff < 2 * 60 * 60 * 1000) {\n            row.state = '即将过期';\n          } else if (timeDiff1 > 0 && timeDiff > 0) {\n            row.state = '待发布';\n          } else {\n            row.state = '进行中';\n          }\n        }\n      });\n    }).catch(error => {\n      console.error(error);\n      this.$message.error('出错啦~');\n    });\n  }\n};","map":{"version":3,"names":["axios","name","data","tableData","methods","getButtonType","state","turnto","index","rows","user","JSON","parse","localStorage","getItem","$router","push","params","param1","param2","parseInt","studentId","deleteRow","$confirm","confirmButtonText","cancelButtonText","type","then","splice","$message","message","formatDateTime","row","isoDate","startTime","date","Date","toLocaleString","formatDateTime1","endTime","mounted","get","student_id","response","console","log","currentTime","forEach","timeDiff","timeDiff1","catch","error"],"sources":["src/components/TestList.vue"],"sourcesContent":["<template>\r\n    <el-table\r\n      :data=\"tableData\"\r\n      style=\"width: 100%\"\r\n      max-height=\"800\">\r\n      <el-table-column\r\n        fixed\r\n        type=\"index\"\r\n        label=\"序号\"\r\n        width=\"150\">\r\n      </el-table-column>\r\n      <el-table-column\r\n        prop=\"name\"\r\n        label=\"考试名称\"\r\n        width=\"150\">\r\n      </el-table-column>\r\n      <el-table-column\r\n        prop=\"startTime\"\r\n        label=\"考试开始时间\"\r\n        width=\"200\"\r\n        sortable\r\n        :formatter=\"formatDateTime\">\r\n        </el-table-column>\r\n        <el-table-column\r\n        prop=\"endTime\"\r\n        label=\"考试结束时间\"\r\n        width=\"180\"\r\n        sortable\r\n        :formatter=\"formatDateTime1\">\r\n        </el-table-column>\r\n      <el-table-column\r\n        prop=\"teacherName\"\r\n        label=\"发布教师\"\r\n        width=\"150\">\r\n      </el-table-column>\r\n          <el-table-column\r\n          prop=\"state\"\r\n          label=\"状态\"\r\n          width=\"150\">\r\n          <template slot-scope=\"scope\">\r\n           <el-button :type=\"getButtonType(scope.row.state)\"> {{ scope.row.state }}\r\n          </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      <el-table-column\r\n        fixed=\"right\"\r\n        label=\"操作\"\r\n        width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button :disabled=\"scope.row.state === '已完成' || scope.row.state === '已过期' || scope.row.state === '待发布'\"\r\n          @click.native.prevent=\"turnto(scope.$index, tableData)\"\r\n          type=\"text\"\r\n          size=\"small\">\r\n          进入考试\r\n          </el-button>\r\n          <el-button icon=\"el-icon-delete\" type=\"text\" @click=\"deleteRow(scope.$index, tableData)\" v-show=\"scope.row.state === '已完成' ||\r\n           scope.row.state === '已过期' ? true :false\"></el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n    export default {\r\n        name:'TestList',\r\n      data() {\r\n        return {\r\n          tableData: [{\r\n           \r\n          }],\r\n        }\r\n      },\r\n      methods: {\r\n            getButtonType(state) {\r\n              switch (state) {\r\n                case '已过期':\r\n                  return 'danger';\r\n                case '即将过期':\r\n                  return 'warning';\r\n                case '进行中':\r\n                  return 'success';\r\n                case '待发布':\r\n                  return '';\r\n                default:\r\n                  return 'primary';\r\n              }\r\n            },\r\n        turnto(index, rows) {\r\n          const name = rows[index].name;\r\n          const user = JSON.parse(localStorage.getItem('user'));\r\n          this.$router.push({name:'ReadTest',params:{ param1: name, param2: parseInt(user.studentId) }});\r\n        },\r\n        deleteRow(index, rows) {\r\n          this.$confirm('确定提交吗？, 是否继续?', '提示', {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            type: 'warning'\r\n          }).then(() => {\r\n            rows.splice(index, 1);\r\n            this.$message({\r\n              type: 'success',\r\n              message: '提交成功!'\r\n            });\r\n          })\r\n        },\r\n        formatDateTime(row){\r\n            const isoDate = row.startTime; \r\n            const date = new Date(isoDate);\r\n            return date.toLocaleString(); \r\n            },\r\n        formatDateTime1(row){\r\n            const isoDate = row.endTime; \r\n            const date = new Date(isoDate);\r\n            return date.toLocaleString(); \r\n            }\r\n      },mounted() {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        axios.get('http://localhost:4399/find', { params: { student_id: parseInt(user.studentId) } })\r\n            .then(response => {\r\n            this.tableData = response.data;\r\n            console.log(response.data);\r\n            const currentTime = new Date(); \r\n\r\n            this.tableData.forEach(row => {\r\n              const endTime = new Date(row.endTime); \r\n              const startTime = new Date(row.startTime); \r\n              const timeDiff = endTime - currentTime; \r\n              const timeDiff1 = startTime - currentTime; \r\n              if(row.state != '已完成')\r\n              {\r\n                if (timeDiff < 0) {\r\n                row.state = '已过期'; \r\n              } else if (timeDiff < 2 * 60 * 60 * 1000) {\r\n                row.state = '即将过期'; \r\n              } else if(timeDiff1 > 0 && timeDiff >0){\r\n                row.state = '待发布'; \r\n              }else{\r\n                row.state = '进行中'; \r\n              }\r\n              }\r\n            });\r\n            })\r\n            .catch(error => {\r\n            console.error(error);\r\n            this.$message.error('出错啦~');\r\n            });\r\n        },\r\n        \r\n    }\r\n  </script>"],"mappings":";AA+DA,OAAAA,KAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA,IAEA;IACA;EACA;EACAC,OAAA;IACAC,cAAAC,KAAA;MACA,QAAAA,KAAA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;IACAC,OAAAC,KAAA,EAAAC,IAAA;MACA,MAAAR,IAAA,GAAAQ,IAAA,CAAAD,KAAA,EAAAP,IAAA;MACA,MAAAS,IAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;QAAAf,IAAA;QAAAgB,MAAA;UAAAC,MAAA,EAAAjB,IAAA;UAAAkB,MAAA,EAAAC,QAAA,CAAAV,IAAA,CAAAW,SAAA;QAAA;MAAA;IACA;IACAC,UAAAd,KAAA,EAAAC,IAAA;MACA,KAAAc,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,IAAA;MACA,GAAAC,IAAA;QACAlB,IAAA,CAAAmB,MAAA,CAAApB,KAAA;QACA,KAAAqB,QAAA;UACAH,IAAA;UACAI,OAAA;QACA;MACA;IACA;IACAC,eAAAC,GAAA;MACA,MAAAC,OAAA,GAAAD,GAAA,CAAAE,SAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAH,OAAA;MACA,OAAAE,IAAA,CAAAE,cAAA;IACA;IACAC,gBAAAN,GAAA;MACA,MAAAC,OAAA,GAAAD,GAAA,CAAAO,OAAA;MACA,MAAAJ,IAAA,OAAAC,IAAA,CAAAH,OAAA;MACA,OAAAE,IAAA,CAAAE,cAAA;IACA;EACA;EAAAG,QAAA;IACA,MAAA9B,IAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;IACAd,KAAA,CAAAyC,GAAA;MAAAxB,MAAA;QAAAyB,UAAA,EAAAtB,QAAA,CAAAV,IAAA,CAAAW,SAAA;MAAA;IAAA,GACAM,IAAA,CAAAgB,QAAA;MACA,KAAAxC,SAAA,GAAAwC,QAAA,CAAAzC,IAAA;MACA0C,OAAA,CAAAC,GAAA,CAAAF,QAAA,CAAAzC,IAAA;MACA,MAAA4C,WAAA,OAAAV,IAAA;MAEA,KAAAjC,SAAA,CAAA4C,OAAA,CAAAf,GAAA;QACA,MAAAO,OAAA,OAAAH,IAAA,CAAAJ,GAAA,CAAAO,OAAA;QACA,MAAAL,SAAA,OAAAE,IAAA,CAAAJ,GAAA,CAAAE,SAAA;QACA,MAAAc,QAAA,GAAAT,OAAA,GAAAO,WAAA;QACA,MAAAG,SAAA,GAAAf,SAAA,GAAAY,WAAA;QACA,IAAAd,GAAA,CAAA1B,KAAA,WACA;UACA,IAAA0C,QAAA;YACAhB,GAAA,CAAA1B,KAAA;UACA,WAAA0C,QAAA;YACAhB,GAAA,CAAA1B,KAAA;UACA,WAAA2C,SAAA,QAAAD,QAAA;YACAhB,GAAA,CAAA1B,KAAA;UACA;YACA0B,GAAA,CAAA1B,KAAA;UACA;QACA;MACA;IACA,GACA4C,KAAA,CAAAC,KAAA;MACAP,OAAA,CAAAO,KAAA,CAAAA,KAAA;MACA,KAAAtB,QAAA,CAAAsB,KAAA;IACA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}